name: CI

on:
  push:
    branches:
    - main
    - validate/*
    tags:
    - 'v*.*'
  pull_request:
  workflow_dispatch:

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  BUILDCONFIGURATION: Release
  NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages/

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-20.04
        - macos-latest
        - windows-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0 # avoid shallow clone so nbgv can do its work.
    - name: ⚙ Install prerequisites
      run: |
        ./init.ps1 -UpgradePrerequisites
        dotnet --info

        # Print mono version if it is present.
        if (Get-Command mono -ErrorAction SilentlyContinue) {
          mono --version
        }
      shell: pwsh
    - name: ⚙️ Set pipeline variables based on source
      run: azure-pipelines/variables/_pipelines.ps1
      shell: pwsh
    - name: 🛠️ cargo build
      run: src/nerdbank-qrcodes/build_all.ps1 -Release
    - name: 🛠 dotnet build
      run: dotnet build -t:build --no-restore -c ${{ env.BUILDCONFIGURATION }} -warnaserror /bl:"${{ runner.temp }}/_artifacts/build_logs/build.binlog"
    - name: 🧪 test
      run: azure-pipelines/dotnet-test-cloud.ps1 -Configuration ${{ env.BUILDCONFIGURATION }} -Agent ${{ runner.os }}
      shell: pwsh
    - name: ⚙ Update pipeline variables based on build outputs
      run: azure-pipelines/variables/_pipelines.ps1
      shell: pwsh
    - name: 📥 Collect artifacts
      run: azure-pipelines/artifacts/_stage_all.ps1
      shell: pwsh
      if: always()
    - name: 📢 Upload project.assets.json files
      if: always()
      uses: actions/upload-artifact@v1
      with:
        name: projectAssetsJson-${{ runner.os }}
        path: ${{ runner.temp }}/_artifacts/projectAssetsJson
      continue-on-error: true
    - name: 📢 Upload variables
      uses: actions/upload-artifact@v1
      with:
        name: variables-${{ runner.os }}
        path: ${{ runner.temp }}/_artifacts/Variables
      continue-on-error: true
    - name: 📢 Upload build_logs
      if: always()
      uses: actions/upload-artifact@v1
      with:
        name: build_logs-${{ runner.os }}
        path: ${{ runner.temp }}/_artifacts/build_logs
      continue-on-error: true
    - name: 📢 Upload test_logs
      if: always()
      uses: actions/upload-artifact@v1
      with:
        name: test_logs-${{ runner.os }}
        path: ${{ runner.temp }}/_artifacts/test_logs
      continue-on-error: true
    - name: 📢 Upload testResults
      if: always()
      uses: actions/upload-artifact@v1
      with:
        name: testResults-${{ runner.os }}
        path: ${{ runner.temp }}/_artifacts/testResults
      continue-on-error: true
    - name: 📢 Upload coverageResults
      if: always()
      uses: actions/upload-artifact@v1
      with:
        name: coverageResults-${{ runner.os }}
        path: ${{ runner.temp }}/_artifacts/coverageResults
      continue-on-error: true
    - name: 📢 Upload symbols
      uses: actions/upload-artifact@v1
      with:
        name: symbols-${{ runner.os }}
        path: ${{ runner.temp }}/_artifacts/symbols
      continue-on-error: true
    - name: 📢 Upload deployables
      uses: actions/upload-artifact@v1
      with:
        name: deployables-${{ runner.os }}
        path: ${{ runner.temp }}/_artifacts/deployables
      if: always()
    - name: 📢 Upload rust
      uses: actions/upload-artifact@v1
      with:
        name: rust-${{ runner.os }}
        path: ${{ runner.temp }}/_artifacts/rust
      if: always()
    - name: 📢 Publish code coverage results to codecov.io
      run: ./azure-pipelines/publish-CodeCov.ps1 -CodeCovToken "${{ secrets.CODECOV_TOKEN }}" -PathToCodeCoverage "${{ runner.temp }}/_artifacts/coverageResults" -Name "${{ runner.os }} Coverage Results" -Flags "${{ runner.os }}Host,${{ env.BUILDCONFIGURATION }}"
      shell: pwsh
      timeout-minutes: 3
      continue-on-error: true
      if: always()

  pack:
    needs: build
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0 # avoid shallow clone so nbgv can do its work.

    - name: ⚙ Install prerequisites
      run: |
        ./init.ps1 -UpgradePrerequisites
        dotnet --info

        # Print mono version if it is present.
        if (Get-Command mono -ErrorAction SilentlyContinue) {
          mono --version
        }
      shell: pwsh

    - name: 🔻 Download linux artifacts
      uses: actions/download-artifact@v3
      with:
        name: rust-Linux
        path: ${{ runner.temp }}/rust

    - name: 🔻 Download windows artifacts
      uses: actions/download-artifact@v3
      with:
        name: rust-Windows
        path: ${{ runner.temp }}/rust

    - name: 🔻 Download macOS artifacts
      uses: actions/download-artifact@v3
      with:
        name: rust-macOS
        path: ${{ runner.temp }}/rust

    - name: 🛠 dotnet pack
      run: dotnet pack --no-restore -c ${{ env.BUILDCONFIGURATION }} -warnaserror /bl:"${{ runner.temp }}/_artifacts/build_logs/build.binlog"

  ship:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: pack
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 1

    - name: 🔻 Download deployables artifacts
      uses: actions/download-artifact@v3
      with:
        name: deployables-Linux
        path: ${{ runner.temp }}/deployables

    - name: 🔏 Code sign
      run: >
        dotnet tool install --tool-path obj SignClient

        obj/SignClient sign
        --baseDirectory '${{ runner.temp }}/deployables'
        --input '**/*'
        --config '${{ github.workspace }}/azure-pipelines/SignClient.json'
        --filelist '${{ github.workspace }}/azure-pipelines/signfiles.txt'
        --user '${{ secrets.CODESIGN_USERNAME }}'
        --secret '${{ secrets.CODESIGN_SECRET }}'
        --name 'Nerdbank.Streams'
        --descriptionUrl 'https://github.com/nerdcash/Nerdbank.QRCodes'
      shell: pwsh

    - name: 🚀 Push NuGet packages
      run: dotnet nuget push ${{ runner.temp }}/deployables/*.nupkg --source https://api.nuget.org/v3/index.json -k '${{ secrets.NUGET_API_KEY }}'
