parameters:
- name: signArtifacts
  type: boolean

steps:
- task: DownloadPipelineArtifact@2
  displayName: ðŸ”» Download Windows binaries
  inputs:
    buildType: current
    targetPath: src/nerdbank-qrcodes/target
    artifactName: rust-Windows
- task: DownloadPipelineArtifact@2
  displayName: ðŸ”» Download Linux binaries
  inputs:
    buildType: current
    targetPath: src/nerdbank-qrcodes/target
    artifactName: rust-Linux
- task: DownloadPipelineArtifact@2
  displayName: ðŸ”» Download android binaries
  inputs:
    buildType: current
    targetPath: src/nerdbank-qrcodes/target
    artifactName: rust-android
- task: DownloadPipelineArtifact@2
  displayName: ðŸ”» Download macOS binaries
  inputs:
    buildType: current
    targetPath: src/nerdbank-qrcodes/target
    artifactName: rust-macOS

- pwsh: src/nerdbank-qrcodes/Generate-3rdPartyNotices.ps1
  displayName: ðŸªª 3rd party licenses

- script: dotnet pack --no-restore -c $(BuildConfiguration) -warnaserror /bl:"$(Build.ArtifactStagingDirectory)/build_logs/pack_x64.binlog"
  displayName: ðŸ›  pack

- powershell: azure-pipelines/artifacts/_pipelines.ps1 -ArtifactNameSuffix "-$(Agent.JobName)" -Verbose
  failOnStderr: true
  displayName: ðŸ“¢ Publish artifacts
  condition: succeededOrFailed()

- powershell: dotnet nuget push 'bin/Packages/$(BuildConfiguration)/NuGet/*.nupkg' -s $(ci_feed) -k azdo --skip-duplicate
  displayName: ðŸ“¦ Push packages to CI feed
  condition: and(succeeded(), ne(variables['ci_feed'], ''), ne(variables['Build.Reason'], 'PullRequest'))
